>>> x = 2
>>> y = 3
>>> z = 4
>>> x + y
5
>>> x + (y * z)
14
>>> 40 + 2.23   // bad practise
42.23
>>> float(40) + 2.23  // good practise
42.23
>>> 'chaicode' + 'code' // operator overloading
'chaicodecode'
>>> x , y,z
(2, 3, 4)
>>> x+1 , y * 2
(3, 6)
>>>z ** 2
16
>>> result = 1/3.0
>>> result
0.3333333333333333

>>> repr('chai')
"'chai'"
>>> str('chai')
'chai'
>>> print('chai')
chai

x,y,z
(2, 3, 4)
>>> x<y<z
or
True
>>> x<y and y<z
True

1 == 2 < 3
False
or 
1 == 2 and 2<3
False


 import math
 // Floor gives closest number below value.
>>> math.floor(3.5)
3
>>> math.floor(-3.5)
-4


Trunc -> takes you towards 0
>>> math.trunc(2.9)
2
>>> math.trunc(-2.5)
-2

// Imaginary number or complex number

>>> (2 + 1j) * 3
(6+3j)

// Octal numbers -> starts with (0o)
>>> 0o20
16

>>> oct(45)
'0o55'


// hexal numbers -> starts with (0x)
>>> 0xFF
255
// converting 45 into octal
>>> hex(45)
'0x2d'

// binary literals => starts with 0b
>>> 0b1000
8
>>> bin(45)
'0b101101'

// bitwise operations
>>> x = 1
>>> x <<  2
4
>>> x | 2
3


>>> import random
>>> random.random()
0.41484914320351685

>>> random.randint(1,100) // gives random number b/w 1 and 100
78

>>> random.choice([1,2,3,4,5,6,7])
6

>>> l1 = [1,2,3,4,5,6,7]
>>> random.shuffle(l1)
>>> l1
[2, 7, 5, 6, 3, 1, 4]


// Decimal Precisions
>>> 0.1 + 0.1 + 0.4
0.6000000000000001
>>> 0.1 + 0.1 + 0.1
0.30000000000000004
>>> 0.1 + 0.1 + 0.1 - 0.3
5.551115123125783e-17
>>> from decimal import Decimal
>>> Decimal('0.1') + Decimal('0.1') + Decimal('0.1')
Decimal('0.3')
>>> Decimal('0.1') + Decimal('0.1') + Decimal('0.1') - Decimal('0.3')
Decimal('0.0')

>>> from fractions import Fraction
>>> myFra = Fraction(2,7)
>>> myFra
Fraction(2, 7)

// Sets

>>> setOne = {1,2,3,4}
>>> setOne & {2,3,4,5} // intersection
{2, 3, 4}
>>> setOne | {2,3,4,5}  // union
{1, 2, 3, 4, 5}
>>> setOne
{1, 2, 3, 4}
>>> setOne - {1,2,3,4}
set()
>>> type({})
<class 'dict'>


// booleans
>>> type(True)
<class 'bool'>
>>> True == 1
True
>>> False == 0
True
>>> True is 1
<stdin>:1: SyntaxWarning: "is" with 'int' literal. Did you mean "=="?
False
>>> True
True
>>> True + 4
5
>>